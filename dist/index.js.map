{"version":3,"file":"index.js","sources":["../src/index.tsx"],"sourcesContent":["import React, {\n  useRef,\n  useEffect,\n  useImperativeHandle,\n  forwardRef\n} from 'react';\n\ntype Props = {\n  allowedCharacters?: 'alpha' | 'numeric' | 'alphanumeric';\n  ariaLabel?: string;\n  length?: number;\n  containerClassName?: string;\n  inputClassName?: string;\n  isPassword?: boolean;\n  onChange: (res: string) => void;\n};\n\ntype InputMode = 'text' | 'numeric';\n\ntype InputType = 'text' | 'number' | 'password';\n\ntype InputProps = {\n  type: InputType;\n  inputMode: InputMode;\n  pattern: string;\n  min?: string;\n  max?: string;\n};\n\nexport type AuthCodeHandle = {\n  focus: () => void;\n};\n\nconst propsMap: { [key: string]: InputProps } = {\n  alpha: {\n    type: 'text',\n    inputMode: 'text',\n    pattern: '[a-zA-Z]{1}'\n  },\n\n  alphanumeric: {\n    type: 'text',\n    inputMode: 'text',\n    pattern: '[a-zA-Z0-9]{1}'\n  },\n\n  numeric: {\n    type: 'number',\n    inputMode: 'numeric',\n    pattern: '[0-9]{1}',\n    min: '0',\n    max: '9'\n  }\n};\n\nconst AuthCode = forwardRef<AuthCodeHandle, Props>(\n  (\n    {\n      allowedCharacters = 'alphanumeric',\n      ariaLabel,\n      length = 6,\n      containerClassName,\n      inputClassName,\n      isPassword = false,\n      onChange\n    },\n    ref\n  ) => {\n    const inputsRef = useRef<Array<HTMLInputElement>>([]);\n    const firstInputRef = useRef<HTMLInputElement>();\n    const inputProps = propsMap[allowedCharacters];\n\n    useImperativeHandle(ref, () => ({\n      focus: () => {\n        if (firstInputRef.current) {\n          firstInputRef.current.focus();\n        }\n      }\n    }));\n\n    useEffect(() => {\n      inputsRef.current[0].focus();\n    }, []);\n\n    const sendResult = () => {\n      const res = inputsRef.current.map((input) => input.value).join('');\n      onChange && onChange(res);\n    };\n\n    const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      const {\n        target: { value, nextElementSibling }\n      } = e;\n      if (value.length > 1) {\n        e.target.value = value.charAt(0);\n        if (nextElementSibling !== null) {\n          (nextElementSibling as HTMLInputElement).focus();\n        }\n      } else {\n        if (value.match(inputProps.pattern)) {\n          if (nextElementSibling !== null) {\n            (nextElementSibling as HTMLInputElement).focus();\n          }\n        } else {\n          e.target.value = '';\n        }\n      }\n      sendResult();\n    };\n\n    const handleOnKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n      const { key } = e;\n      const target = e.target as HTMLInputElement;\n      if (key === 'Backspace') {\n        if (target.value === '' && target.previousElementSibling !== null) {\n          if (target.previousElementSibling !== null) {\n            (target.previousElementSibling as HTMLInputElement).focus();\n            e.preventDefault();\n          }\n        } else {\n          target.value = '';\n        }\n        sendResult();\n      }\n    };\n\n    const handleOnFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n      e.target.select();\n    };\n\n    const handleOnPaste = (e: React.ClipboardEvent<HTMLInputElement>) => {\n      const pastedValue = e.clipboardData.getData('Text');\n\n      let currentInput = 0;\n\n      for (let i = 0; i < pastedValue.length; i++) {\n        const pastedCharacter = pastedValue.charAt(i);\n        const currentValue = inputsRef.current[currentInput].value;\n        if (pastedCharacter.match(inputProps.pattern)) {\n          if (!currentValue) {\n            inputsRef.current[currentInput].value = pastedCharacter;\n            if (inputsRef.current[currentInput].nextElementSibling !== null) {\n              (inputsRef.current[currentInput]\n                .nextElementSibling as HTMLInputElement).focus();\n              currentInput++;\n            }\n          }\n        }\n      }\n      sendResult();\n\n      e.preventDefault();\n    };\n\n    const inputs = [];\n    for (let i = 0; i < length; i++) {\n      inputs.push(\n        <input\n          key={i}\n          onChange={handleOnChange}\n          onKeyDown={handleOnKeyDown}\n          onFocus={handleOnFocus}\n          onPaste={handleOnPaste}\n          {...inputProps}\n          type={isPassword ? 'password' : inputProps.type}\n          ref={(el: HTMLInputElement) => {\n            inputsRef.current[i] = el;\n            if (i === 0) {\n              firstInputRef.current = el;\n            }\n          }}\n          maxLength={1}\n          className={inputClassName}\n          autoComplete={i === 0 ? 'one-time-code' : 'off'}\n          aria-label={\n            ariaLabel\n              ? `${ariaLabel}. Character ${i + 1}.`\n              : `Character ${i + 1}.`\n          }\n        />\n      );\n    }\n\n    return <div className={containerClassName}>{inputs}</div>;\n  }\n);\n\nexport default AuthCode;\n"],"names":["propsMap","alpha","type","inputMode","pattern","alphanumeric","numeric","min","max","AuthCode","forwardRef","ref","allowedCharacters","ariaLabel","length","containerClassName","inputClassName","isPassword","onChange","inputsRef","useRef","firstInputRef","inputProps","useImperativeHandle","focus","current","useEffect","sendResult","res","map","input","value","join","handleOnChange","e","target","nextElementSibling","charAt","match","handleOnKeyDown","key","previousElementSibling","preventDefault","handleOnFocus","select","handleOnPaste","pastedValue","clipboardData","getData","currentInput","i","pastedCharacter","currentValue","inputs","push","React","onKeyDown","onFocus","onPaste","el","maxLength","className","autoComplete"],"mappings":"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"}